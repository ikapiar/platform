name: Release Pipeline

on:
  release:
    types:
      - published

jobs:
  build-push-deploy-backend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push the Docker image
      - name: Build and Push Docker Image
        working-directory: ./backend
        env:
          VERSION: ${{ github.event.release.tag_name }}
        run: |
          # Build the Docker image
          docker build -t ghcr.io/ikapiar/backend:${VERSION} .
          docker tag ghcr.io/ikapiar/backend:${VERSION} ghcr.io/ikapiar/backend:latest
          
          # Push the Docker image
          docker push ghcr.io/ikapiar/backend:${VERSION}
          docker push ghcr.io/ikapiar/backend:latest

      - name: Populate Env for backend
        working-directory: ./backend
        env:
          APP_ENV: production
          DB_URI: ${{ secrets.DB_URI }}
          JWT_PRIVATE_KEY_BASE64: ${{ secrets.JWT_PRIVATE_KEY_BASE64 }}
          JWT_PUBLIC_KEY_BASE64: ${{ secrets.JWT_PUBLIC_KEY_BASE64 }}
          PASSWORD_SALT: ${{ secrets.PASSWORD_SALT }}
          SUDO_TOKEN: ${{ secrets.SUDO_TOKEN }}
          APP_ENV_FILE_PATH: ./deploy/env
        run: |
          echo APP_ENV="$APP_ENV" > "$APP_ENV_FILE_PATH"
          echo DB_URI="$DB_URI" >> "$APP_ENV_FILE_PATH"
          echo JWT_PRIVATE_KEY_BASE64="$JWT_PRIVATE_KEY_BASE64" >> "$APP_ENV_FILE_PATH"
          echo JWT_PUBLIC_KEY_BASE64="$JWT_PUBLIC_KEY_BASE64" >> "$APP_ENV_FILE_PATH"
          echo PASSWORD_SALT="$PASSWORD_SALT" >> "$APP_ENV_FILE_PATH"
          echo SUDO_TOKEN="SUDO_TOKEN" >> "$APP_ENV_FILE_PATH"

      - name: Sync deploy files Backend
        working-directory: ./backend
        env:
          HOSTNAME: ${{ secrets.HOSTNAME }}
          PORT: ${{ secrets.PORT }}
          KEY: ${{ secrets.KEY }}
          USERNAME: ${{ secrets.USERNAME }}
        run: |
          # Save SSH key to a temporary file
          echo "$KEY" > /tmp/deploy_key
          chmod 600 /tmp/deploy_key

          # Use rsync to deploy static files
          rsync -avz -e "ssh -p $PORT -i /tmp/deploy_key -o StrictHostKeyChecking=no" ./deploy/ "$USERNAME@$HOSTNAME:/apps/ikapiar-backend"

          # Clean up the temporary key
          rm -f /tmp/deploy_key

      - name: Run backend
        env:
          HOSTNAME: ${{ secrets.HOSTNAME }}
          PORT: ${{ secrets.PORT }}
          KEY: ${{ secrets.KEY }}
          USERNAME: ${{ secrets.USERNAME }}
        run: |
          # Save SSH key to a temporary file
          echo "$KEY" > /tmp/deploy_key
          chmod 600 /tmp/deploy_key

          ssh -p $PORT -i /tmp/deploy_key -o StrictHostKeyChecking=no $USERNAME@$HOSTNAME "chmod +x /apps/ikapiar-backend/container-ikapiar.sh && /apps/ikapiar-backend/container-ikapiar.sh"

          # Clean up the temporary key
          rm -f /tmp/deploy_key

  build-and-deploy-frontend:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18 # Adjust based on your project requirements

      # Install dependencies and build frontend
      - name: Install and Build Frontend
        working-directory: ./frontend
        run: |
          npm install
          npm run build

      # Deploy built static files using rsync
      - name: Deploy Frontend to Server
        env:
          HOSTNAME: ${{ secrets.HOSTNAME }}
          PORT: ${{ secrets.PORT }}
          KEY: ${{ secrets.KEY }}
          USERNAME: ${{ secrets.USERNAME }}
        run: |
          # Save SSH key to a temporary file
          echo "$KEY" > /tmp/deploy_key
          chmod 600 /tmp/deploy_key
          
          # Use rsync to deploy static files
          rsync -avz -e "ssh -p $PORT -i /tmp/deploy_key -o StrictHostKeyChecking=no" ./frontend/out/ "$USERNAME@$HOSTNAME:/var/www/ikapiar"
          
          # Clean up the temporary key
          rm -f /tmp/deploy_key
